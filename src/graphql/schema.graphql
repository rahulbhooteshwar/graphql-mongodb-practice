type Query {
  users(keyword: String): [User!]!
  posts(keyword: String): [Post!]!
  comments: [Comment!]!
}
type Mutation {
  createUser(data: CreateUserInput!): User!
  deleteUser(_id: ID!): User!
  updateUser(_id: ID!, data: UpdateUserInput!): User!
  createPost(data: CreatePostInput!): Post!
  deletePost(_id: ID!): Post!
  updatePost(_id: ID!, data: UpdatePostInput!): Post!
  createComment(data: CreateCommentInput!): Comment!
  deleteComment(_id: ID!): Comment!
  updateComment(_id: ID!, data: UpdateCommentInput!): Comment!
}
type Subscription {
  comment(postId:ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}
input CreateUserInput {
  name: String!
  email: String!
  age: Float
}
input UpdateUserInput {
  name: String
  email: String
  age: Float
}
input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}
input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}
input CreateCommentInput {
  text: String!
  post: ID!
  author: ID!
}
input UpdateCommentInput {
  text: String
}

type User {
  _id: ID!
  name: String!
  email: String!
  age: Float
  posts: [Post!]!
  comments: [Comment!]!
}
type Post {
  _id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}
type Comment {
  _id: ID!
  text: String!
  author: User!
  post: Post!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}
type CommentSubscriptionPayload {
  mutation: MutationType!
  data: Comment!
}

enum MutationType {
  CREATED
  DELETED
  UPDATED
}
